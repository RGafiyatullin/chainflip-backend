
//! Autogenerated weights for pallet_cf_governance
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-07, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-9-222`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_governance
// --extrinsic
// *
// --output
// state-chain/pallets/cf-governance/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_governance.
pub trait WeightInfo {
	fn propose_governance_extrinsic() -> Weight;
	fn approve() -> Weight;
	fn new_membership_set() -> Weight;
	fn call_as_sudo() -> Weight;
	fn on_initialize(b: u32, ) -> Weight;
	fn on_initialize_best_case() -> Weight;
	fn expire_proposals(b: u32, ) -> Weight;
	fn set_whitelisted_call_hash() -> Weight;
	fn submit_govkey_call() -> Weight;
	fn dispatch_whitelisted_call() -> Weight;
}

/// Weights for pallet_cf_governance using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Governance::Members` (r:1 w:0)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ProposalIdCounter` (r:1 w:1)
	/// Proof: `Governance::ProposalIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Governance::ExpiryTime` (r:1 w:0)
	/// Proof: `Governance::ExpiryTime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ActiveProposals` (r:1 w:1)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:1)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:0 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_governance_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `1619`
		// Minimum execution time: 38_936_000 picoseconds.
		Weight::from_parts(39_404_000, 1619)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Governance::Members` (r:1 w:0)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:1)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ActiveProposals` (r:1 w:1)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `3662`
		// Minimum execution time: 27_944_000 picoseconds.
		Weight::from_parts(28_404_000, 3662)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Members` (r:0 w:1)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn new_membership_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_772_000 picoseconds.
		Weight::from_parts(4_002_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
	fn call_as_sudo() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 15_532_000 picoseconds.
		Weight::from_parts(16_268_000, 1485)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::ActiveProposals` (r:1 w:1)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:0)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 100]`.
	fn on_initialize(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182 + b * (12 ±0)`
		//  Estimated: `1644 + b * (12 ±0)`
		// Minimum execution time: 3_809_000 picoseconds.
		Weight::from_parts(8_967_078, 1644)
			// Standard Error: 4_834
			.saturating_add(Weight::from_parts(710_699, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 12).saturating_mul(b.into()))
	}
	/// Storage: `Governance::ActiveProposals` (r:1 w:0)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:0)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_initialize_best_case() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70`
		//  Estimated: `1555`
		// Minimum execution time: 3_911_000 picoseconds.
		Weight::from_parts(4_076_000, 1555)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Governance::ActiveProposals` (r:1 w:0)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:0 w:99)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 100]`.
	fn expire_proposals(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140 + b * (12 ±0)`
		//  Estimated: `1610 + b * (12 ±0)`
		// Minimum execution time: 2_920_000 picoseconds.
		Weight::from_parts(4_346_748, 1610)
			// Standard Error: 8_820
			.saturating_add(Weight::from_parts(4_728_804, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 12).saturating_mul(b.into()))
	}
	/// Storage: `Governance::GovKeyWhitelistedCallHash` (r:0 w:1)
	/// Proof: `Governance::GovKeyWhitelistedCallHash` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_whitelisted_call_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_962_000 picoseconds.
		Weight::from_parts(9_196_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::NextGovKeyCallHashNonce` (r:1 w:1)
	/// Proof: `Governance::NextGovKeyCallHashNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::GovKeyWhitelistedCallHash` (r:1 w:1)
	/// Proof: `Governance::GovKeyWhitelistedCallHash` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Members` (r:0 w:1)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_govkey_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `148`
		//  Estimated: `1633`
		// Minimum execution time: 23_573_000 picoseconds.
		Weight::from_parts(24_181_000, 1633)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Members` (r:1 w:1)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::PreAuthorisedGovCalls` (r:1 w:1)
	/// Proof: `Governance::PreAuthorisedGovCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn dispatch_whitelisted_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `3655`
		// Minimum execution time: 22_401_000 picoseconds.
		Weight::from_parts(22_816_000, 3655)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Governance::Members` (r:1 w:0)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ProposalIdCounter` (r:1 w:1)
	/// Proof: `Governance::ProposalIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Governance::ExpiryTime` (r:1 w:0)
	/// Proof: `Governance::ExpiryTime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ActiveProposals` (r:1 w:1)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:1)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:0 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_governance_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `1619`
		// Minimum execution time: 38_936_000 picoseconds.
		Weight::from_parts(39_404_000, 1619)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Governance::Members` (r:1 w:0)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:1)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ActiveProposals` (r:1 w:1)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `3662`
		// Minimum execution time: 27_944_000 picoseconds.
		Weight::from_parts(28_404_000, 3662)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Members` (r:0 w:1)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn new_membership_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_772_000 picoseconds.
		Weight::from_parts(4_002_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
	fn call_as_sudo() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 15_532_000 picoseconds.
		Weight::from_parts(16_268_000, 1485)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::ActiveProposals` (r:1 w:1)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:0)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 100]`.
	fn on_initialize(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182 + b * (12 ±0)`
		//  Estimated: `1644 + b * (12 ±0)`
		// Minimum execution time: 3_809_000 picoseconds.
		Weight::from_parts(8_967_078, 1644)
			// Standard Error: 4_834
			.saturating_add(Weight::from_parts(710_699, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 12).saturating_mul(b.into()))
	}
	/// Storage: `Governance::ActiveProposals` (r:1 w:0)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ExecutionPipeline` (r:1 w:0)
	/// Proof: `Governance::ExecutionPipeline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_initialize_best_case() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70`
		//  Estimated: `1555`
		// Minimum execution time: 3_911_000 picoseconds.
		Weight::from_parts(4_076_000, 1555)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Governance::ActiveProposals` (r:1 w:0)
	/// Proof: `Governance::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:0 w:99)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 100]`.
	fn expire_proposals(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140 + b * (12 ±0)`
		//  Estimated: `1610 + b * (12 ±0)`
		// Minimum execution time: 2_920_000 picoseconds.
		Weight::from_parts(4_346_748, 1610)
			// Standard Error: 8_820
			.saturating_add(Weight::from_parts(4_728_804, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 12).saturating_mul(b.into()))
	}
	/// Storage: `Governance::GovKeyWhitelistedCallHash` (r:0 w:1)
	/// Proof: `Governance::GovKeyWhitelistedCallHash` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_whitelisted_call_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_962_000 picoseconds.
		Weight::from_parts(9_196_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::NextGovKeyCallHashNonce` (r:1 w:1)
	/// Proof: `Governance::NextGovKeyCallHashNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::GovKeyWhitelistedCallHash` (r:1 w:1)
	/// Proof: `Governance::GovKeyWhitelistedCallHash` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Members` (r:0 w:1)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_govkey_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `148`
		//  Estimated: `1633`
		// Minimum execution time: 23_573_000 picoseconds.
		Weight::from_parts(24_181_000, 1633)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Members` (r:1 w:1)
	/// Proof: `Governance::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::PreAuthorisedGovCalls` (r:1 w:1)
	/// Proof: `Governance::PreAuthorisedGovCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn dispatch_whitelisted_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `3655`
		// Minimum execution time: 22_401_000 picoseconds.
		Weight::from_parts(22_816_000, 3655)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
