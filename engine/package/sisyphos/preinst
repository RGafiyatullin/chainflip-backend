#!/bin/bash
set -e

CF_ENGINE_TARGET_VERSION="0.10.0"

check_upgrade() {
    if [ "$1" != "upgrade" ]; then
        echo "chainflip-engine: Fresh install detected, skipping migration"
        exit 0
    else
        echo "chainflip-engine: Upgrade detected, migrating"
    fi
}

stop_service() {
    if systemctl is-active --quiet "$1"; then
        if systemctl stop "$1"; then
            echo "$1 stopped"
        else
            echo "Error stopping $1"
            exit 1
        fi
    else
        echo "$1 is already stopped"
    fi
}

compare_semver() {
    # Extract SemVer using Regular Expressions
    extract_semver() {
        if [[ $1 =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            echo "${BASH_REMATCH[1]}"
        else
            echo ""
        fi
    }
    ver1_raw="$1"
    ver2_raw="$2"

    ver1=$(extract_semver "$ver1_raw")
    ver2=$(extract_semver "$ver2_raw")

    # Split versions into major, minor, and patch numbers
    IFS='.' read -ra ver1_parts <<< "$ver1"
    IFS='.' read -ra ver2_parts <<< "$ver2"

    # Compare major, minor, and patch numbers
    for i in 0 1 2; do
        if [[ -z "${ver1_parts[$i]}" ]]; then ver1_parts[$i]=0; fi
        if [[ -z "${ver2_parts[$i]}" ]]; then ver2_parts[$i]=0; fi

        if (( ${ver1_parts[$i]} > ${ver2_parts[$i]} )); then
            echo 1
            return
        elif (( ${ver1_parts[$i]} < ${ver2_parts[$i]} )); then
            echo -1
            return
        fi
    done
    # If we reach here, the versions are equal so far. You can extend this
    # to handle pre-release labels and build metadata if needed.
    echo 0
}

check_version() {
    CF_ENGINE_CURRENT_VERSION=$(chainflip-engine -V)
    result=$(compare_semver "$CF_ENGINE_CURRENT_VERSION" "$CF_ENGINE_TARGET_VERSION")
    if (( result == 1 )); then
        echo "Current version is greater than target version, skipping migration"
        exit 0
    elif (( result == -1 )); then
        echo "Current version is less than target version, migrating"
    else
        echo "Both versions are equal. Skipping migration"
        exit 0
    fi
}

move_binary() {
    echo "chainflip-engine: Moving binary"
    mv /usr/bin/chainflip-engine /usr/bin/chainflip-engine-prev
}


# Main entry point
main() {
    check_upgrade "$1"
    check_version
    # stop_service "chainflip-engine-prev" #TODO: for next release, stop chainflip-engine-prev too
    stop_service "chainflip-engine"
    move_binary
}

# Only run the main function if the script is not being sourced
# This allows you to source the script in your tests without running main
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi

# #DEBHELPER#
